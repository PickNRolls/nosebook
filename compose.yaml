services:
  db:
    image: nosebook-postgres
    stop_grace_period: 0s
    container_name: db
    restart: always
    user: postgres
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements", "-c", "log_lock_waits=on", "-c", "deadlock_timeout=300ms"]
    secrets:
      - db-password
    environment:
      - POSTGRES_DB=nosebook
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 2s
      timeout: 5s
      retries: 10

  db-prometheus-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    stop_grace_period: 0s
    container_name: db-prometheus-exporter
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - DATA_SOURCE_URI=db:5432/nosebook?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS_FILE=/run/secrets/db-password
    command: --collector.stat_statements
    expose:
      - 9187

  rabbitmq:
    image: rabbitmq:3.13-management
    stop_grace_period: 0s
    container_name: rabbitmq
    restart: always
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    ports:
      - 5672:5672
      - 15672:15672
      - 15692:15692
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 3

  notification:
    image: nosebook-notification
    stop_grace_period: 0s
    container_name: notification
    restart: always
    ports:
      - 8081:8081
    expose:
      - 8081
    depends_on:
      rabbitmq:
        condition: service_healthy

  backend:
    container_name: backend
    stop_grace_period: 0s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      notification:
        condition: service_started
    secrets:
      - db-password
      - aws-access-key-id
      - aws-secret-access-key
    build:
      context: .
      target: final
    environment:
      - POSTGRES_DB=nosebook
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - AWS_ACCESS_KEY_ID_FILE=/run/secrets/aws-access-key-id
      - AWS_ACCESS_SECRET_KEY_FILE=/run/secrets/aws-secret-access-key
      - APP_ENV=$APP_ENV
      - TRACING_ENABLED=$TRACING_ENABLED
      - TRACING_EXPORTER=jaeger
    develop:
      watch:
        - action: rebuild
          path: ./src
    ports:
      - 8080:8080
    healthcheck:
      test: curl http://backend:8080/ping --fail
      interval: 10s
      timeout: 2s
      retries: 3

  frontend:
    image: nosebook-frontend
    stop_grace_period: 0s
    container_name: frontend
    depends_on:
      - backend
    ports:
      - 80:8000

secrets:
  db-password:
    file: db-password.txt
  aws-access-key-id:
    file: aws-access-key-id.txt
  aws-secret-access-key:
    file: aws-secret-access-key.txt

